---
import Icon from './Icon.astro';
import type { iconPaths } from './IconPaths';
import ThemeToggle from './ThemeToggle.astro';

/** Main menu items */
const textLinks: { label: string; href: string }[] = [
	{ label: 'Home', href: '/' },
	{ label: 'Work', href: '/work/' },
	{ label: 'Niku', href: '/about/' },
	{ label: 'M1RA', href: '/mira/' },
];

/** Icon links to social media */
const iconLinks: { label: string; href: string; icon: keyof typeof iconPaths }[] = [
	{ label: 'X (Twitter)', href: 'https://x.com/M1RA_A_Project', icon: 'x-logo' },
	{ label: 'YouTube', href: 'http://www.youtube.com/@M1RA_Archive_Project', icon: 'youtube-logo' },
	{ label: 'GitHub', href: 'https://github.com/Nikunikuo', icon: 'github-logo' },
];

/** Test if a link is pointing to the current page. */
const isCurrentPage = (href: string) => {
	let pathname = Astro.url.pathname.replace(import.meta.env.BASE_URL, '');
	if (pathname.at(0) !== '/') pathname = '/' + pathname;
	if (pathname.at(-1) !== '/') pathname += '/';
	return pathname === href || (href !== '/' && pathname.startsWith(href));
};
---

<nav>
	<div class="floating-menu">
		<a href="/" class="menu-item">
			<Icon icon="rocket-launch" size="1.2em" />
			<span>Home</span>
		</a>
		<a href="/work/" class="menu-item" aria-current={isCurrentPage('/work/') ? 'page' : null}>
			<Icon icon="strategy" size="1.2em" />
			<span>Work</span>
		</a>
		<a href="/about/" class="menu-item" aria-current={isCurrentPage('/about/') ? 'page' : null}>
			<Icon icon="pencil-line" size="1.2em" />
			<span>Niku</span>
		</a>
		<a href="/mira/" class="menu-item" aria-current={isCurrentPage('/mira/') ? 'page' : null}>
			<Icon icon="strategy" size="1.2em" />
			<span>M1RA</span>
		</a>
		<div class="menu-divider"></div>
		{
			iconLinks.map(({ href, icon, label }) => (
				<a href={href} class="menu-item social" target="_blank" rel="noopener noreferrer" title={label}>
					<Icon icon={icon} size="1.2em" />
				</a>
			))
		}
	</div>
	<noscript>
		<ul class="nav-items">
			{
				textLinks.map(({ label, href }) => (
					<li>
						<a aria-current={isCurrentPage(href) ? 'page' : null} class="link" href={href}>
							{label}
						</a>
					</li>
				))
			}
		</ul>
	</noscript>
	<noscript>
		<div class="menu-footer">
			<div class="socials">
				{
					iconLinks.map(({ href, icon, label }) => (
						<a href={href} class="social">
							<span class="sr-only">{label}</span>
							<Icon icon={icon} />
						</a>
					))
				}
			</div>
		</div>
	</noscript>
	<div id="menu-content" hidden>
		<ul class="nav-items">
			{
				textLinks.map(({ label, href }) => (
					<li>
						<a aria-current={isCurrentPage(href) ? 'page' : null} class="link" href={href}>
							{label}
						</a>
					</li>
				))
			}
		</ul>
		<div class="menu-footer">
			<div class="socials">
				{
					iconLinks.map(({ href, icon, label }) => (
						<a href={href} class="social">
							<span class="sr-only">{label}</span>
							<Icon icon={icon} />
						</a>
					))
				}
			</div>

			<div class="theme-toggle">
				<ThemeToggle />
			</div>
		</div>
	</div>
</nav>

<script>
	class MenuButton extends HTMLElement {
		constructor() {
			super();

			// Inject menu toggle button when JS runs.
			this.appendChild(this.querySelector('template')!.content.cloneNode(true));
			const btn = this.querySelector('button')!;

			// Hide menu (shown by default to support no-JS browsers).
			const menu = document.getElementById('menu-content')!;
			menu.hidden = true;
			// Add "menu-content" class in JS to avoid covering content in non-JS browsers.
			menu.classList.add('menu-content');

			/** Set whether the menu is currently expanded or collapsed. */
			const setExpanded = (expand: boolean) => {
				btn.setAttribute('aria-expanded', expand ? 'true' : 'false');
				menu.hidden = !expand;
			};

			// Toggle menu visibility when the menu button is clicked.
			btn.addEventListener('click', () => setExpanded(menu.hidden));

			// Hide menu button for large screens.
			const handleViewports = (e: MediaQueryList | MediaQueryListEvent) => {
				setExpanded(e.matches);
				btn.hidden = e.matches;
			};
			const mediaQueries = window.matchMedia('(min-width: 50em)');
			handleViewports(mediaQueries);
			mediaQueries.addEventListener('change', handleViewports);
		}
	}
	customElements.define('menu-button', MenuButton);
</script>

<style>
	nav {
		z-index: 9999;
		position: fixed;
		top: 1rem;
		right: 1rem;
		font-family: var(--font-brand);
		font-weight: 500;
	}

	.floating-menu {
		display: flex;
		align-items: center;
		gap: 0.25rem;
		padding: 0.5rem 1rem;
		background: rgba(0, 0, 0, 0.8);
		backdrop-filter: blur(12px);
		border: 1px solid rgba(255, 255, 255, 0.1);
		border-radius: 999px;
		box-shadow: 0 4px 24px rgba(0, 0, 0, 0.4);
	}

	.menu-item {
		display: flex;
		align-items: center;
		gap: 0.5rem;
		padding: 0.5rem 0.75rem;
		color: var(--gray-300);
		text-decoration: none;
		border-radius: 999px;
		transition: all 0.3s ease;
		font-size: var(--text-sm);
		white-space: nowrap;
	}

	.menu-item:hover {
		background: rgba(255, 255, 255, 0.1);
		color: var(--gray-0);
	}

	.menu-item[aria-current='page'] {
		background: var(--accent-regular);
		color: var(--gray-0);
	}

	.menu-item.social {
		padding: 0.5rem;
	}

	.menu-item span {
		font-size: 0.875rem;
	}

	.menu-divider {
		width: 1px;
		height: 1.5rem;
		background: rgba(255, 255, 255, 0.2);
		margin: 0 0.5rem;
	}

	@media (max-width: 768px) {
		nav {
			right: 0.5rem;
			top: 0.5rem;
		}

		.floating-menu {
			padding: 0.5rem;
			gap: 0.125rem;
		}

		.menu-item span {
			display: none;
		}

		.menu-item {
			padding: 0.5rem;
		}
	}
</style>
